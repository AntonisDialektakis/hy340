Terminals unused in grammar

   SINGLE_LINE_COMMENT
   OTHERCHAR
   UMINUS


State 16 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt: expr SEMICOLON
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt

    7 $@1: %empty

    8 stmt: BREAK $@1 SEMICOLON

    9 $@2: %empty

   10 stmt: CONTINUE $@2 SEMICOLON
   11     | block
   12     | funcdef
   13     | SEMICOLON

   14 stmt_list: stmt stmt_list
   15          | %empty

   16 expr: assignexpr
   17     | expr ADD expr
   18     | expr MINUS expr
   19     | expr MULTIPLICATION expr
   20     | expr DIVISION expr
   21     | expr MODULO expr
   22     | expr GREATER expr
   23     | expr GREATER_EQUAL expr
   24     | expr LESS expr
   25     | expr LESS_EQUAL expr
   26     | expr EQUAL expr
   27     | expr INEQUAL expr

   28 $@3: %empty

   29 expr: expr AND $@3 M expr

   30 $@4: %empty

   31 expr: expr OR $@4 M expr
   32     | term

   33 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   34     | MINUS expr
   35     | NOT expr
   36     | INCREMENT lvalue
   37     | lvalue INCREMENT
   38     | DECREMENT lvalue
   39     | lvalue DECREMENT
   40     | primary

   41 $@5: %empty

   42 $@6: %empty

   43 assignexpr: lvalue $@5 ASSIGN $@6 expr

   44 primary: lvalue
   45        | call
   46        | objectdef
   47        | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS
   48        | const

   49 lvalue: IDENT
   50       | LOCAL IDENT
   51       | DOUBLE_COLON IDENT
   52       | member

   53 member: lvalue DOT IDENT
   54       | lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   55       | call DOT IDENT
   56       | call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET

   57 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS
   58     | lvalue callsuffix
   59     | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   60 callsuffix: normcall
   61           | methodcall

   62 $@7: %empty

   63 normcall: LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS

   64 $@8: %empty

   65 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@8 elist RIGHT_PARENTHESIS

   66 elist: expr elist_expressions
   67      | %empty

   68 elist_expressions: COMMA expr elist_expressions
   69                  | %empty

   70 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET
   71          | LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET

   72 indexed: indexedelem indexedelem_list

   73 indexedelem_list: COMMA indexedelem indexedelem_list
   74                 | %empty

   75 $@9: %empty

   76 indexedelem: LEFT_CURLY_BRACKET expr COLON $@9 expr RIGHT_CURLY_BRACKET

   77 $@10: %empty

   78 block: LEFT_CURLY_BRACKET $@10 stmt_list RIGHT_CURLY_BRACKET
   79      | LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

   80 $@11: %empty

   81 @12: %empty

   82 $@13: %empty

   83 $@14: %empty

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block

   85 @15: %empty

   86 $@16: %empty

   87 $@17: %empty

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS $@17 block

   89 const: INTEGER
   90      | REAL
   91      | STRINGCONST
   92      | NIL
   93      | TRUE
   94      | FALSE

   95 $@18: %empty

   96 idlist: IDENT $@18 idlist_list
   97       | %empty

   98 $@19: %empty

   99 idlist_list: COMMA IDENT $@19 idlist_list
  100            | %empty

  101 $@20: %empty

  102 ifprefix: IF LEFT_PARENTHESIS $@20 expr RIGHT_PARENTHESIS

  103 elseprefix: ELSE

  104 ifstmt: ifprefix stmt
  105       | ifprefix stmt elseprefix stmt

  106 whilestart: WHILE

  107 whilecond: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  108 whilestmt: whilestart whilecond stmt

  109 N: %empty

  110 M: %empty

  111 $@21: %empty

  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist SEMICOLON M expr SEMICOLON

  113 $@22: %empty

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS $@22 N stmt N

  115 $@23: %empty

  116 returnstmt: RETURN $@23 expr SEMICOLON

  117 $@24: %empty

  118 returnstmt: RETURN $@24 SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 102
ELSE (259) 103
WHILE (260) 106
FOR (261) 112
FUNCTION (262) 84 88
RETURN (263) 116 118
BREAK (264) 8
CONTINUE (265) 10
AND (266) 29
NOT (267) 35
OR (268) 31
LOCAL (269) 50
TRUE (270) 93
FALSE (271) 94
NIL (272) 92
ASSIGN (273) 43
ADD (274) 17
MINUS (275) 18 34
MULTIPLICATION (276) 19
DIVISION (277) 20
MODULO (278) 21
EQUAL (279) 26
INEQUAL (280) 27
INCREMENT (281) 36 37
DECREMENT (282) 38 39
GREATER (283) 22
GREATER_EQUAL (284) 23
LESS (285) 24
LESS_EQUAL (286) 25
LEFT_CURLY_BRACKET (287) 76 78 79
RIGHT_CURLY_BRACKET (288) 76 78 79
LEFT_SQUARE_BRACKET (289) 54 56 70 71
RIGHT_SQUARE_BRACKET (290) 54 56 70 71
LEFT_PARENTHESIS (291) 33 47 57 59 63 65 84 88 102 107 112
RIGHT_PARENTHESIS (292) 33 47 57 59 63 65 84 88 102 107 114
SEMICOLON (293) 2 8 10 13 112 116 118
COMMA (294) 68 73 99
COLON (295) 76
DOUBLE_COLON (296) 51
DOT (297) 53 55
DOUBLE_DOT (298) 65
SINGLE_LINE_COMMENT (299)
OTHERCHAR (300)
IDENT (301) 49 50 51 53 55 65 84 96 99
INTEGER (302) 89
REAL (303) 90
STRINGCONST (304) 91
UMINUS (305)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
stmt (53)
    on left: 2 3 4 5 6 8 10 11 12 13, on right: 14 104 105 108 114
$@1 (54)
    on left: 7, on right: 8
$@2 (55)
    on left: 9, on right: 10
stmt_list (56)
    on left: 14 15, on right: 1 14 78
expr (57)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 29 31 32, on right:
    2 17 18 19 20 21 22 23 24 25 26 27 29 31 33 34 35 43 54 56 66 68
    76 102 107 112 116
$@3 (58)
    on left: 28, on right: 29
$@4 (59)
    on left: 30, on right: 31
term (60)
    on left: 33 34 35 36 37 38 39 40, on right: 32
assignexpr (61)
    on left: 43, on right: 16
$@5 (62)
    on left: 41, on right: 43
$@6 (63)
    on left: 42, on right: 43
primary (64)
    on left: 44 45 46 47 48, on right: 40
lvalue (65)
    on left: 49 50 51 52, on right: 36 37 38 39 43 44 53 54 58
member (66)
    on left: 53 54 55 56, on right: 52
call (67)
    on left: 57 58 59, on right: 45 55 56 57
callsuffix (68)
    on left: 60 61, on right: 58
normcall (69)
    on left: 63, on right: 60
$@7 (70)
    on left: 62, on right: 63
methodcall (71)
    on left: 65, on right: 61
$@8 (72)
    on left: 64, on right: 65
elist (73)
    on left: 66 67, on right: 57 59 63 65 70 112 114
elist_expressions (74)
    on left: 68 69, on right: 66 68
objectdef (75)
    on left: 70 71, on right: 46
indexed (76)
    on left: 72, on right: 71
indexedelem_list (77)
    on left: 73 74, on right: 72 73
indexedelem (78)
    on left: 76, on right: 72 73
$@9 (79)
    on left: 75, on right: 76
block (80)
    on left: 78 79, on right: 11 84 88
$@10 (81)
    on left: 77, on right: 78
funcdef (82)
    on left: 84 88, on right: 12 47 59
$@11 (83)
    on left: 80, on right: 84
@12 (84)
    on left: 81, on right: 84
$@13 (85)
    on left: 82, on right: 84
$@14 (86)
    on left: 83, on right: 84
@15 (87)
    on left: 85, on right: 88
$@16 (88)
    on left: 86, on right: 88
$@17 (89)
    on left: 87, on right: 88
const (90)
    on left: 89 90 91 92 93 94, on right: 48
idlist (91)
    on left: 96 97, on right: 84 88
$@18 (92)
    on left: 95, on right: 96
idlist_list (93)
    on left: 99 100, on right: 96 99
$@19 (94)
    on left: 98, on right: 99
ifprefix (95)
    on left: 102, on right: 104 105
$@20 (96)
    on left: 101, on right: 102
elseprefix (97)
    on left: 103, on right: 105
ifstmt (98)
    on left: 104 105, on right: 3
whilestart (99)
    on left: 106, on right: 108
whilecond (100)
    on left: 107, on right: 108
whilestmt (101)
    on left: 108, on right: 4
N (102)
    on left: 109, on right: 114
M (103)
    on left: 110, on right: 29 31 112
forprefix (104)
    on left: 112, on right: 114
$@21 (105)
    on left: 111, on right: 112
forstmt (106)
    on left: 114, on right: 5
$@22 (107)
    on left: 113, on right: 114
returnstmt (108)
    on left: 116 118, on right: 6
$@23 (109)
    on left: 115, on right: 116
$@24 (110)
    on left: 117, on right: 118


State 0

    0 $accept: . program $end

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 15 (stmt_list)

    program     go to state 25
    stmt        go to state 26
    stmt_list   go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 1

  102 ifprefix: IF . LEFT_PARENTHESIS $@20 expr RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 46


State 2

  106 whilestart: WHILE .

    $default  reduce using rule 106 (whilestart)


State 3

  112 forprefix: FOR . LEFT_PARENTHESIS $@21 elist SEMICOLON M expr SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 47


State 4

   84 funcdef: FUNCTION . $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block
   88        | FUNCTION . @15 LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS $@17 block

    LEFT_PARENTHESIS  reduce using rule 85 (@15)
    $default          reduce using rule 80 ($@11)

    $@11  go to state 48
    @15   go to state 49


State 5

  116 returnstmt: RETURN . $@23 expr SEMICOLON
  118           | RETURN . $@24 SEMICOLON

    SEMICOLON  reduce using rule 117 ($@24)
    $default   reduce using rule 115 ($@23)

    $@23  go to state 50
    $@24  go to state 51


State 6

    8 stmt: BREAK . $@1 SEMICOLON

    $default  reduce using rule 7 ($@1)

    $@1  go to state 52


State 7

   10 stmt: CONTINUE . $@2 SEMICOLON

    $default  reduce using rule 9 ($@2)

    $@2  go to state 53


State 8

   35 term: NOT . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 54
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   50 lvalue: LOCAL . IDENT

    IDENT  shift, and go to state 55


State 10

   93 const: TRUE .

    $default  reduce using rule 93 (const)


State 11

   94 const: FALSE .

    $default  reduce using rule 94 (const)


State 12

   92 const: NIL .

    $default  reduce using rule 92 (const)


State 13

   34 term: MINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 14

   36 term: INCREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON      shift, and go to state 20
    IDENT             shift, and go to state 21

    lvalue  go to state 58
    member  go to state 33
    call    go to state 59


State 15

   38 term: DECREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON      shift, and go to state 20
    IDENT             shift, and go to state 21

    lvalue  go to state 60
    member  go to state 33
    call    go to state 59


State 16

   78 block: LEFT_CURLY_BRACKET . $@10 stmt_list RIGHT_CURLY_BRACKET
   79      | LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 61

    RIGHT_CURLY_BRACKET  [reduce using rule 77 ($@10)]
    $default             reduce using rule 77 ($@10)

    $@10  go to state 62


State 17

   70 objectdef: LEFT_SQUARE_BRACKET . elist RIGHT_SQUARE_BRACKET
   71          | LEFT_SQUARE_BRACKET . indexed RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 63
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr         go to state 64
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 65
    objectdef    go to state 35
    indexed      go to state 66
    indexedelem  go to state 67
    const        go to state 38


State 18

   33 term: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS
   47 primary: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS
   59 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION             shift, and go to state 4
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 69
    const       go to state 38


State 19

   13 stmt: SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 20

   51 lvalue: DOUBLE_COLON . IDENT

    IDENT  shift, and go to state 70


State 21

   49 lvalue: IDENT .

    $default  reduce using rule 49 (lvalue)


State 22

   89 const: INTEGER .

    $default  reduce using rule 89 (const)


State 23

   90 const: REAL .

    $default  reduce using rule 90 (const)


State 24

   91 const: STRINGCONST .

    $default  reduce using rule 91 (const)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 71


State 26

   14 stmt_list: stmt . stmt_list

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 15 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 72
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 27

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 28

    2 stmt: expr . SEMICOLON
   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 86


State 29

   32 expr: term .

    $default  reduce using rule 32 (expr)


State 30

   16 expr: assignexpr .

    $default  reduce using rule 16 (expr)


State 31

   40 term: primary .

    $default  reduce using rule 40 (term)


State 32

   37 term: lvalue . INCREMENT
   39     | lvalue . DECREMENT
   43 assignexpr: lvalue . $@5 ASSIGN $@6 expr
   44 primary: lvalue .
   53 member: lvalue . DOT IDENT
   54       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   58 call: lvalue . callsuffix

    INCREMENT            shift, and go to state 87
    DECREMENT            shift, and go to state 88
    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    ASSIGN    reduce using rule 41 ($@5)
    $default  reduce using rule 44 (primary)

    $@5         go to state 93
    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 33

   52 lvalue: member .

    $default  reduce using rule 52 (lvalue)


State 34

   45 primary: call .
   55 member: call . DOT IDENT
   56       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   57 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 97
    LEFT_PARENTHESIS     shift, and go to state 98
    DOT                  shift, and go to state 99

    $default  reduce using rule 45 (primary)


State 35

   46 primary: objectdef .

    $default  reduce using rule 46 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   48 primary: const .

    $default  reduce using rule 48 (primary)


State 39

  104 ifstmt: ifprefix . stmt
  105       | ifprefix . stmt elseprefix stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 100
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 40

    3 stmt: ifstmt .

    $default  reduce using rule 3 (stmt)


State 41

  108 whilestmt: whilestart . whilecond stmt

    LEFT_PARENTHESIS  shift, and go to state 101

    whilecond  go to state 102


State 42

    4 stmt: whilestmt .

    $default  reduce using rule 4 (stmt)


State 43

  114 forstmt: forprefix . N elist RIGHT_PARENTHESIS $@22 N stmt N

    $default  reduce using rule 109 (N)

    N  go to state 103


State 44

    5 stmt: forstmt .

    $default  reduce using rule 5 (stmt)


State 45

    6 stmt: returnstmt .

    $default  reduce using rule 6 (stmt)


State 46

  102 ifprefix: IF LEFT_PARENTHESIS . $@20 expr RIGHT_PARENTHESIS

    $default  reduce using rule 101 ($@20)

    $@20  go to state 104


State 47

  112 forprefix: FOR LEFT_PARENTHESIS . $@21 elist SEMICOLON M expr SEMICOLON

    $default  reduce using rule 111 ($@21)

    $@21  go to state 105


State 48

   84 funcdef: FUNCTION $@11 . IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block

    IDENT  shift, and go to state 106


State 49

   88 funcdef: FUNCTION @15 . LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS $@17 block

    LEFT_PARENTHESIS  shift, and go to state 107


State 50

  116 returnstmt: RETURN $@23 . expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 108
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 51

  118 returnstmt: RETURN $@24 . SEMICOLON

    SEMICOLON  shift, and go to state 109


State 52

    8 stmt: BREAK $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 110


State 53

   10 stmt: CONTINUE $@2 . SEMICOLON

    SEMICOLON  shift, and go to state 111


State 54

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   35 term: NOT expr .

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 35 (term)


State 55

   50 lvalue: LOCAL IDENT .

    $default  reduce using rule 50 (lvalue)


State 56

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   34 term: MINUS expr .

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 34 (term)


State 57

   59 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION  shift, and go to state 4

    funcdef  go to state 112


State 58

   36 term: INCREMENT lvalue .
   53 member: lvalue . DOT IDENT
   54       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   58 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    $default  reduce using rule 36 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 59

   55 member: call . DOT IDENT
   56       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   57 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 97
    LEFT_PARENTHESIS     shift, and go to state 98
    DOT                  shift, and go to state 99


State 60

   38 term: DECREMENT lvalue .
   53 member: lvalue . DOT IDENT
   54       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   58 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESIS     shift, and go to state 90
    DOT                  shift, and go to state 91
    DOUBLE_DOT           shift, and go to state 92

    $default  reduce using rule 38 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 61

   79 block: LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    $default  reduce using rule 79 (block)


State 62

   78 block: LEFT_CURLY_BRACKET $@10 . stmt_list RIGHT_CURLY_BRACKET

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 15 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 113
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 63

   76 indexedelem: LEFT_CURLY_BRACKET . expr COLON $@9 expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 114
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 64

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   66 elist: expr . elist_expressions

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COMMA           shift, and go to state 115

    $default  reduce using rule 69 (elist_expressions)

    elist_expressions  go to state 116


State 65

   70 objectdef: LEFT_SQUARE_BRACKET elist . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 117


State 66

   71 objectdef: LEFT_SQUARE_BRACKET indexed . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 118


State 67

   72 indexed: indexedelem . indexedelem_list

    COMMA  shift, and go to state 119

    $default  reduce using rule 74 (indexedelem_list)

    indexedelem_list  go to state 120


State 68

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   33 term: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 121


State 69

   47 primary: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS
   59 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 122


State 70

   51 lvalue: DOUBLE_COLON IDENT .

    $default  reduce using rule 51 (lvalue)


State 71

    0 $accept: program $end .

    $default  accept


State 72

   14 stmt_list: stmt stmt_list .

    $default  reduce using rule 14 (stmt_list)


State 73

   29 expr: expr AND . $@3 M expr

    $default  reduce using rule 28 ($@3)

    $@3  go to state 123


State 74

   31 expr: expr OR . $@4 M expr

    $default  reduce using rule 30 ($@4)

    $@4  go to state 124


State 75

   17 expr: expr ADD . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   18 expr: expr MINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   19 expr: expr MULTIPLICATION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   20 expr: expr DIVISION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   21 expr: expr MODULO . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   26 expr: expr EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   27 expr: expr INEQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 131
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   22 expr: expr GREATER . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 132
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

   23 expr: expr GREATER_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 84

   24 expr: expr LESS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   25 expr: expr LESS_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 135
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

    2 stmt: expr SEMICOLON .

    $default  reduce using rule 2 (stmt)


State 87

   37 term: lvalue INCREMENT .

    $default  reduce using rule 37 (term)


State 88

   39 term: lvalue DECREMENT .

    $default  reduce using rule 39 (term)


State 89

   54 member: lvalue LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 136
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 90

   63 normcall: LEFT_PARENTHESIS . $@7 elist RIGHT_PARENTHESIS

    $default  reduce using rule 62 ($@7)

    $@7  go to state 137


State 91

   53 member: lvalue DOT . IDENT

    IDENT  shift, and go to state 138


State 92

   65 methodcall: DOUBLE_DOT . IDENT LEFT_PARENTHESIS $@8 elist RIGHT_PARENTHESIS

    IDENT  shift, and go to state 139


State 93

   43 assignexpr: lvalue $@5 . ASSIGN $@6 expr

    ASSIGN  shift, and go to state 140


State 94

   58 call: lvalue callsuffix .

    $default  reduce using rule 58 (call)


State 95

   60 callsuffix: normcall .

    $default  reduce using rule 60 (callsuffix)


State 96

   61 callsuffix: methodcall .

    $default  reduce using rule 61 (callsuffix)


State 97

   56 member: call LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 141
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 98

   57 call: call LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 142
    objectdef   go to state 35
    const       go to state 38


State 99

   55 member: call DOT . IDENT

    IDENT  shift, and go to state 143


State 100

  104 ifstmt: ifprefix stmt .
  105       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 144

    ELSE      [reduce using rule 104 (ifstmt)]
    $default  reduce using rule 104 (ifstmt)

    elseprefix  go to state 145


State 101

  107 whilecond: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 146
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 102

  108 whilestmt: whilestart whilecond . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 147
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 103

  114 forstmt: forprefix N . elist RIGHT_PARENTHESIS $@22 N stmt N

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 148
    objectdef   go to state 35
    const       go to state 38


State 104

  102 ifprefix: IF LEFT_PARENTHESIS $@20 . expr RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 149
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 105

  112 forprefix: FOR LEFT_PARENTHESIS $@21 . elist SEMICOLON M expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 150
    objectdef   go to state 35
    const       go to state 38


State 106

   84 funcdef: FUNCTION $@11 IDENT . @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block

    $default  reduce using rule 81 (@12)

    @12  go to state 151


State 107

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS . $@16 idlist RIGHT_PARENTHESIS $@17 block

    $default  reduce using rule 86 ($@16)

    $@16  go to state 152


State 108

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
  116 returnstmt: RETURN $@23 expr . SEMICOLON

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 153


State 109

  118 returnstmt: RETURN $@24 SEMICOLON .

    $default  reduce using rule 118 (returnstmt)


State 110

    8 stmt: BREAK $@1 SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 111

   10 stmt: CONTINUE $@2 SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 112

   59 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 154


State 113

   78 block: LEFT_CURLY_BRACKET $@10 stmt_list . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 155


State 114

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   76 indexedelem: LEFT_CURLY_BRACKET expr . COLON $@9 expr RIGHT_CURLY_BRACKET

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COLON           shift, and go to state 156


State 115

   68 elist_expressions: COMMA . expr elist_expressions

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 157
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 116

   66 elist: expr elist_expressions .

    $default  reduce using rule 66 (elist)


State 117

   70 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 70 (objectdef)


State 118

   71 objectdef: LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 71 (objectdef)


State 119

   73 indexedelem_list: COMMA . indexedelem indexedelem_list

    LEFT_CURLY_BRACKET  shift, and go to state 63

    indexedelem  go to state 158


State 120

   72 indexed: indexedelem indexedelem_list .

    $default  reduce using rule 72 (indexed)


State 121

   33 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 33 (term)


State 122

   47 primary: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS .
   59 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 159

    $default  reduce using rule 47 (primary)


State 123

   29 expr: expr AND $@3 . M expr

    $default  reduce using rule 110 (M)

    M  go to state 160


State 124

   31 expr: expr OR $@4 . M expr

    $default  reduce using rule 110 (M)

    M  go to state 161


State 125

   17 expr: expr . ADD expr
   17     | expr ADD expr .
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 17 (expr)


State 126

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   18     | expr MINUS expr .
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    $default  reduce using rule 18 (expr)


State 127

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   19     | expr MULTIPLICATION expr .
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    $default  reduce using rule 19 (expr)


State 128

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   20     | expr DIVISION expr .
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    $default  reduce using rule 20 (expr)


State 129

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   21     | expr MODULO expr .
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    $default  reduce using rule 21 (expr)


State 130

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   26     | expr EQUAL expr .
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 26 (expr)


State 131

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   27     | expr INEQUAL expr .
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 27 (expr)


State 132

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   22     | expr GREATER expr .
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 133

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   23     | expr GREATER_EQUAL expr .
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 23 (expr)


State 134

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   24     | expr LESS expr .
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 24 (expr)


State 135

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   25     | expr LESS_EQUAL expr .
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 25 (expr)


State 136

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   54 member: lvalue LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 73
    OR                    shift, and go to state 74
    ADD                   shift, and go to state 75
    MINUS                 shift, and go to state 76
    MULTIPLICATION        shift, and go to state 77
    DIVISION              shift, and go to state 78
    MODULO                shift, and go to state 79
    EQUAL                 shift, and go to state 80
    INEQUAL               shift, and go to state 81
    GREATER               shift, and go to state 82
    GREATER_EQUAL         shift, and go to state 83
    LESS                  shift, and go to state 84
    LESS_EQUAL            shift, and go to state 85
    RIGHT_SQUARE_BRACKET  shift, and go to state 162


State 137

   63 normcall: LEFT_PARENTHESIS $@7 . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 163
    objectdef   go to state 35
    const       go to state 38


State 138

   53 member: lvalue DOT IDENT .

    $default  reduce using rule 53 (member)


State 139

   65 methodcall: DOUBLE_DOT IDENT . LEFT_PARENTHESIS $@8 elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 164


State 140

   43 assignexpr: lvalue $@5 ASSIGN . $@6 expr

    $default  reduce using rule 42 ($@6)

    $@6  go to state 165


State 141

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   56 member: call LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 73
    OR                    shift, and go to state 74
    ADD                   shift, and go to state 75
    MINUS                 shift, and go to state 76
    MULTIPLICATION        shift, and go to state 77
    DIVISION              shift, and go to state 78
    MODULO                shift, and go to state 79
    EQUAL                 shift, and go to state 80
    INEQUAL               shift, and go to state 81
    GREATER               shift, and go to state 82
    GREATER_EQUAL         shift, and go to state 83
    LESS                  shift, and go to state 84
    LESS_EQUAL            shift, and go to state 85
    RIGHT_SQUARE_BRACKET  shift, and go to state 166


State 142

   57 call: call LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 167


State 143

   55 member: call DOT IDENT .

    $default  reduce using rule 55 (member)


State 144

  103 elseprefix: ELSE .

    $default  reduce using rule 103 (elseprefix)


State 145

  105 ifstmt: ifprefix stmt elseprefix . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 168
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 146

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
  107 whilecond: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 169


State 147

  108 whilestmt: whilestart whilecond stmt .

    $default  reduce using rule 108 (whilestmt)


State 148

  114 forstmt: forprefix N elist . RIGHT_PARENTHESIS $@22 N stmt N

    RIGHT_PARENTHESIS  shift, and go to state 170


State 149

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
  102 ifprefix: IF LEFT_PARENTHESIS $@20 expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    ADD                shift, and go to state 75
    MINUS              shift, and go to state 76
    MULTIPLICATION     shift, and go to state 77
    DIVISION           shift, and go to state 78
    MODULO             shift, and go to state 79
    EQUAL              shift, and go to state 80
    INEQUAL            shift, and go to state 81
    GREATER            shift, and go to state 82
    GREATER_EQUAL      shift, and go to state 83
    LESS               shift, and go to state 84
    LESS_EQUAL         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 171


State 150

  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 172


State 151

   84 funcdef: FUNCTION $@11 IDENT @12 . LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block

    LEFT_PARENTHESIS  shift, and go to state 173


State 152

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 . idlist RIGHT_PARENTHESIS $@17 block

    IDENT  shift, and go to state 174

    $default  reduce using rule 97 (idlist)

    idlist  go to state 175


State 153

  116 returnstmt: RETURN $@23 expr SEMICOLON .

    $default  reduce using rule 116 (returnstmt)


State 154

   59 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 159


State 155

   78 block: LEFT_CURLY_BRACKET $@10 stmt_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 78 (block)


State 156

   76 indexedelem: LEFT_CURLY_BRACKET expr COLON . $@9 expr RIGHT_CURLY_BRACKET

    $default  reduce using rule 75 ($@9)

    $@9  go to state 176


State 157

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   68 elist_expressions: COMMA expr . elist_expressions

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    COMMA           shift, and go to state 115

    $default  reduce using rule 69 (elist_expressions)

    elist_expressions  go to state 177


State 158

   73 indexedelem_list: COMMA indexedelem . indexedelem_list

    COMMA  shift, and go to state 119

    $default  reduce using rule 74 (indexedelem_list)

    indexedelem_list  go to state 178


State 159

   59 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 179
    objectdef   go to state 35
    const       go to state 38


State 160

   29 expr: expr AND $@3 M . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 180
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 161

   31 expr: expr OR $@4 M . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 181
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 162

   54 member: lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 54 (member)


State 163

   63 normcall: LEFT_PARENTHESIS $@7 elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 182


State 164

   65 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS . $@8 elist RIGHT_PARENTHESIS

    $default  reduce using rule 64 ($@8)

    $@8  go to state 183


State 165

   43 assignexpr: lvalue $@5 ASSIGN $@6 . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 184
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 166

   56 member: call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 56 (member)


State 167

   57 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 57 (call)


State 168

  105 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 105 (ifstmt)


State 169

  107 whilecond: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 107 (whilecond)


State 170

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS . $@22 N stmt N

    $default  reduce using rule 113 ($@22)

    $@22  go to state 185


State 171

  102 ifprefix: IF LEFT_PARENTHESIS $@20 expr RIGHT_PARENTHESIS .

    $default  reduce using rule 102 (ifprefix)


State 172

  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 110 (M)

    M  go to state 186


State 173

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS . $@13 idlist RIGHT_PARENTHESIS $@14 block

    $default  reduce using rule 82 ($@13)

    $@13  go to state 187


State 174

   96 idlist: IDENT . $@18 idlist_list

    $default  reduce using rule 95 ($@18)

    $@18  go to state 188


State 175

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 idlist . RIGHT_PARENTHESIS $@17 block

    RIGHT_PARENTHESIS  shift, and go to state 189


State 176

   76 indexedelem: LEFT_CURLY_BRACKET expr COLON $@9 . expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 190
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 177

   68 elist_expressions: COMMA expr elist_expressions .

    $default  reduce using rule 68 (elist_expressions)


State 178

   73 indexedelem_list: COMMA indexedelem indexedelem_list .

    $default  reduce using rule 73 (indexedelem_list)


State 179

   59 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 191


State 180

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   29     | expr AND $@3 M expr .
   31     | expr . OR $@4 M expr

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 29 (expr)


State 181

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   31     | expr OR $@4 M expr .

    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 31 (expr)


State 182

   63 normcall: LEFT_PARENTHESIS $@7 elist RIGHT_PARENTHESIS .

    $default  reduce using rule 63 (normcall)


State 183

   65 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@8 . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 64
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 192
    objectdef   go to state 35
    const       go to state 38


State 184

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   43 assignexpr: lvalue $@5 ASSIGN $@6 expr .

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85

    $default  reduce using rule 43 (assignexpr)


State 185

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS $@22 . N stmt N

    $default  reduce using rule 109 (N)

    N  go to state 193


State 186

  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist SEMICOLON M . expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    expr        go to state 194
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 187

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 . idlist RIGHT_PARENTHESIS $@14 block

    IDENT  shift, and go to state 174

    $default  reduce using rule 97 (idlist)

    idlist  go to state 195


State 188

   96 idlist: IDENT $@18 . idlist_list

    COMMA  shift, and go to state 196

    $default  reduce using rule 100 (idlist_list)

    idlist_list  go to state 197


State 189

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS . $@17 block

    $default  reduce using rule 87 ($@17)

    $@17  go to state 198


State 190

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
   76 indexedelem: LEFT_CURLY_BRACKET expr COLON $@9 expr . RIGHT_CURLY_BRACKET

    AND                  shift, and go to state 73
    OR                   shift, and go to state 74
    ADD                  shift, and go to state 75
    MINUS                shift, and go to state 76
    MULTIPLICATION       shift, and go to state 77
    DIVISION             shift, and go to state 78
    MODULO               shift, and go to state 79
    EQUAL                shift, and go to state 80
    INEQUAL              shift, and go to state 81
    GREATER              shift, and go to state 82
    GREATER_EQUAL        shift, and go to state 83
    LESS                 shift, and go to state 84
    LESS_EQUAL           shift, and go to state 85
    RIGHT_CURLY_BRACKET  shift, and go to state 199


State 191

   59 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 59 (call)


State 192

   65 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@8 elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 200


State 193

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS $@22 N . stmt N

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    MINUS                shift, and go to state 13
    INCREMENT            shift, and go to state 14
    DECREMENT            shift, and go to state 15
    LEFT_CURLY_BRACKET   shift, and go to state 16
    LEFT_SQUARE_BRACKET  shift, and go to state 17
    LEFT_PARENTHESIS     shift, and go to state 18
    SEMICOLON            shift, and go to state 19
    DOUBLE_COLON         shift, and go to state 20
    IDENT                shift, and go to state 21
    INTEGER              shift, and go to state 22
    REAL                 shift, and go to state 23
    STRINGCONST          shift, and go to state 24

    stmt        go to state 201
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 194

   17 expr: expr . ADD expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLICATION expr
   20     | expr . DIVISION expr
   21     | expr . MODULO expr
   22     | expr . GREATER expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS expr
   25     | expr . LESS_EQUAL expr
   26     | expr . EQUAL expr
   27     | expr . INEQUAL expr
   29     | expr . AND $@3 M expr
   31     | expr . OR $@4 M expr
  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist SEMICOLON M expr . SEMICOLON

    AND             shift, and go to state 73
    OR              shift, and go to state 74
    ADD             shift, and go to state 75
    MINUS           shift, and go to state 76
    MULTIPLICATION  shift, and go to state 77
    DIVISION        shift, and go to state 78
    MODULO          shift, and go to state 79
    EQUAL           shift, and go to state 80
    INEQUAL         shift, and go to state 81
    GREATER         shift, and go to state 82
    GREATER_EQUAL   shift, and go to state 83
    LESS            shift, and go to state 84
    LESS_EQUAL      shift, and go to state 85
    SEMICOLON       shift, and go to state 202


State 195

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist . RIGHT_PARENTHESIS $@14 block

    RIGHT_PARENTHESIS  shift, and go to state 203


State 196

   99 idlist_list: COMMA . IDENT $@19 idlist_list

    IDENT  shift, and go to state 204


State 197

   96 idlist: IDENT $@18 idlist_list .

    $default  reduce using rule 96 (idlist)


State 198

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS $@17 . block

    LEFT_CURLY_BRACKET  shift, and go to state 16

    block  go to state 205


State 199

   76 indexedelem: LEFT_CURLY_BRACKET expr COLON $@9 expr RIGHT_CURLY_BRACKET .

    $default  reduce using rule 76 (indexedelem)


State 200

   65 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS $@8 elist RIGHT_PARENTHESIS .

    $default  reduce using rule 65 (methodcall)


State 201

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS $@22 N stmt . N

    $default  reduce using rule 109 (N)

    N  go to state 206


State 202

  112 forprefix: FOR LEFT_PARENTHESIS $@21 elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 112 (forprefix)


State 203

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS . $@14 block

    $default  reduce using rule 83 ($@14)

    $@14  go to state 207


State 204

   99 idlist_list: COMMA IDENT . $@19 idlist_list

    $default  reduce using rule 98 ($@19)

    $@19  go to state 208


State 205

   88 funcdef: FUNCTION @15 LEFT_PARENTHESIS $@16 idlist RIGHT_PARENTHESIS $@17 block .

    $default  reduce using rule 88 (funcdef)


State 206

  114 forstmt: forprefix N elist RIGHT_PARENTHESIS $@22 N stmt N .

    $default  reduce using rule 114 (forstmt)


State 207

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 . block

    LEFT_CURLY_BRACKET  shift, and go to state 16

    block  go to state 209


State 208

   99 idlist_list: COMMA IDENT $@19 . idlist_list

    COMMA  shift, and go to state 196

    $default  reduce using rule 100 (idlist_list)

    idlist_list  go to state 210


State 209

   84 funcdef: FUNCTION $@11 IDENT @12 LEFT_PARENTHESIS $@13 idlist RIGHT_PARENTHESIS $@14 block .

    $default  reduce using rule 84 (funcdef)


State 210

   99 idlist_list: COMMA IDENT $@19 idlist_list .

    $default  reduce using rule 99 (idlist_list)
