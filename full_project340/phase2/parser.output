Terminals unused in grammar

   SINGLE_LINE_COMMENT
   OTHERCHAR


State 15 conflicts: 1 shift/reduce
State 154 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt: expr SEMICOLON
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt
    7     | BREAK SEMICOLON
    8     | CONTINUE SEMICOLON
    9     | block
   10     | funcdef
   11     | SEMICOLON

   12 stmt_list: stmt stmt_list
   13          | %empty

   14 expr: assignexpr
   15     | expr ADD expr
   16     | expr MINUS expr
   17     | expr MULTIPLICATION expr
   18     | expr DIVISION expr
   19     | expr MODULO expr
   20     | expr GREATER expr
   21     | expr GREATER_EQUAL expr
   22     | expr LESS expr
   23     | expr LESS_EQUAL expr
   24     | expr EQUAL expr
   25     | expr INEQUAL expr
   26     | expr AND expr
   27     | expr OR expr
   28     | term

   29 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   30     | UMINUS expr
   31     | NOT expr
   32     | INCREMENT lvalue
   33     | lvalue INCREMENT
   34     | DECREMENT lvalue
   35     | lvalue DECREMENT
   36     | primary

   37 $@1: %empty

   38 $@2: %empty

   39 assignexpr: lvalue $@1 ASSIGN $@2 expr

   40 primary: lvalue
   41        | call
   42        | objectdef
   43        | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS
   44        | const

   45 lvalue: IDENT
   46       | LOCAL IDENT
   47       | DOUBLE_COLON IDENT
   48       | member

   49 member: lvalue DOT IDENT
   50       | lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   51       | call DOT IDENT
   52       | call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET

   53 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS
   54     | lvalue callsuffix
   55     | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   56 callsuffix: normcall
   57           | methodcall

   58 $@3: %empty

   59 normcall: LEFT_PARENTHESIS $@3 elist RIGHT_PARENTHESIS

   60 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   61 elist: expr elist_expressions
   62      | %empty

   63 elist_expressions: COMMA expr elist_expressions
   64                  | %empty

   65 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET
   66          | LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET

   67 indexed: indexedelem indexedelem_list

   68 indexedelem_list: COMMA indexedelem indexedelem_list
   69                 | %empty

   70 $@4: %empty

   71 indexedelem: LEFT_CURLY_BRACKET expr COLON $@4 expr RIGHT_CURLY_BRACKET

   72 $@5: %empty

   73 block: LEFT_CURLY_BRACKET $@5 stmt_list RIGHT_CURLY_BRACKET
   74      | LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

   75 $@6: %empty

   76 $@7: %empty

   77 $@8: %empty

   78 $@9: %empty

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block

   80 $@10: %empty

   81 $@11: %empty

   82 $@12: %empty

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS $@12 block

   84 const: INTEGER
   85      | REAL
   86      | STRINGCONST
   87      | NIL
   88      | TRUE
   89      | FALSE

   90 $@13: %empty

   91 idlist: IDENT $@13 idlist_list
   92       | %empty

   93 $@14: %empty

   94 idlist_list: COMMA IDENT $@14 idlist_list
   95            | %empty

   96 ifstmt: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt
   97       | IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt ELSE stmt

   98 whilestmt: WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt

   99 $@15: %empty

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

  101 $@16: %empty

  102 returnstmt: RETURN $@16 expr SEMICOLON
  103           | RETURN SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 96 97
ELSE (259) 97
WHILE (260) 98
FOR (261) 100
FUNCTION (262) 79 83
RETURN (263) 102 103
BREAK (264) 7
CONTINUE (265) 8
AND (266) 26
NOT (267) 31
OR (268) 27
LOCAL (269) 46
TRUE (270) 88
FALSE (271) 89
NIL (272) 87
ASSIGN (273) 39
ADD (274) 15
MINUS (275) 16
MULTIPLICATION (276) 17
DIVISION (277) 18
MODULO (278) 19
EQUAL (279) 24
INEQUAL (280) 25
INCREMENT (281) 32 33
DECREMENT (282) 34 35
GREATER (283) 20
GREATER_EQUAL (284) 21
LESS (285) 22
LESS_EQUAL (286) 23
LEFT_CURLY_BRACKET (287) 71 73 74
RIGHT_CURLY_BRACKET (288) 71 73 74
LEFT_SQUARE_BRACKET (289) 50 52 65 66
RIGHT_SQUARE_BRACKET (290) 50 52 65 66
LEFT_PARENTHESIS (291) 29 43 53 55 59 60 79 83 96 97 98 100
RIGHT_PARENTHESIS (292) 29 43 53 55 59 60 79 83 96 97 98 100
SEMICOLON (293) 2 7 8 11 100 102 103
COMMA (294) 63 68 94
COLON (295) 71
DOUBLE_COLON (296) 47
DOT (297) 49 51
DOUBLE_DOT (298) 60
SINGLE_LINE_COMMENT (299)
OTHERCHAR (300)
IDENT (301) 45 46 47 49 51 60 79 91 94
INTEGER (302) 84
REAL (303) 85
STRINGCONST (304) 86
UMINUS (305) 30


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
stmt (53)
    on left: 2 3 4 5 6 7 8 9 10 11, on right: 12 96 97 98 100
stmt_list (54)
    on left: 12 13, on right: 1 12 73
expr (55)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    2 15 16 17 18 19 20 21 22 23 24 25 26 27 29 30 31 39 50 52 61 63
    71 96 97 98 100 102
term (56)
    on left: 29 30 31 32 33 34 35 36, on right: 28
assignexpr (57)
    on left: 39, on right: 14
$@1 (58)
    on left: 37, on right: 39
$@2 (59)
    on left: 38, on right: 39
primary (60)
    on left: 40 41 42 43 44, on right: 36
lvalue (61)
    on left: 45 46 47 48, on right: 32 33 34 35 39 40 49 50 54
member (62)
    on left: 49 50 51 52, on right: 48
call (63)
    on left: 53 54 55, on right: 41 51 52 53
callsuffix (64)
    on left: 56 57, on right: 54
normcall (65)
    on left: 59, on right: 56
$@3 (66)
    on left: 58, on right: 59
methodcall (67)
    on left: 60, on right: 57
elist (68)
    on left: 61 62, on right: 53 55 59 60 65 100
elist_expressions (69)
    on left: 63 64, on right: 61 63
objectdef (70)
    on left: 65 66, on right: 42
indexed (71)
    on left: 67, on right: 66
indexedelem_list (72)
    on left: 68 69, on right: 67 68
indexedelem (73)
    on left: 71, on right: 67 68
$@4 (74)
    on left: 70, on right: 71
block (75)
    on left: 73 74, on right: 9 79 83
$@5 (76)
    on left: 72, on right: 73
funcdef (77)
    on left: 79 83, on right: 10 43 55
$@6 (78)
    on left: 75, on right: 79
$@7 (79)
    on left: 76, on right: 79
$@8 (80)
    on left: 77, on right: 79
$@9 (81)
    on left: 78, on right: 79
$@10 (82)
    on left: 80, on right: 83
$@11 (83)
    on left: 81, on right: 83
$@12 (84)
    on left: 82, on right: 83
const (85)
    on left: 84 85 86 87 88 89, on right: 44
idlist (86)
    on left: 91 92, on right: 79 83
$@13 (87)
    on left: 90, on right: 91
idlist_list (88)
    on left: 94 95, on right: 91 94
$@14 (89)
    on left: 93, on right: 94
ifstmt (90)
    on left: 96 97, on right: 3
whilestmt (91)
    on left: 98, on right: 4
forstmt (92)
    on left: 100, on right: 5
$@15 (93)
    on left: 99, on right: 100
returnstmt (94)
    on left: 102 103, on right: 6
$@16 (95)
    on left: 101, on right: 102


State 0

    0 $accept: . program $end

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 13 (stmt_list)

    program     go to state 25
    stmt        go to state 26
    stmt_list   go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   96 ifstmt: IF . LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt
   97       | IF . LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt ELSE stmt

    LEFT_PARENTHESIS  shift, and go to state 43


State 2

   98 whilestmt: WHILE . LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt

    LEFT_PARENTHESIS  shift, and go to state 44


State 3

  100 forstmt: FOR . LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

    LEFT_PARENTHESIS  shift, and go to state 45


State 4

   79 funcdef: FUNCTION . $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block
   83        | FUNCTION . $@10 LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS $@12 block

    LEFT_PARENTHESIS  reduce using rule 80 ($@10)
    $default          reduce using rule 75 ($@6)

    $@6   go to state 46
    $@10  go to state 47


State 5

  102 returnstmt: RETURN . $@16 expr SEMICOLON
  103           | RETURN . SEMICOLON

    SEMICOLON  shift, and go to state 48

    $default  reduce using rule 101 ($@16)

    $@16  go to state 49


State 6

    7 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 7

    8 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 51


State 8

   31 term: NOT . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 52
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 9

   46 lvalue: LOCAL . IDENT

    IDENT  shift, and go to state 53


State 10

   88 const: TRUE .

    $default  reduce using rule 88 (const)


State 11

   89 const: FALSE .

    $default  reduce using rule 89 (const)


State 12

   87 const: NIL .

    $default  reduce using rule 87 (const)


State 13

   32 term: INCREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 54
    DOUBLE_COLON      shift, and go to state 19
    IDENT             shift, and go to state 20

    lvalue  go to state 55
    member  go to state 33
    call    go to state 56


State 14

   34 term: DECREMENT . lvalue

    LOCAL             shift, and go to state 9
    LEFT_PARENTHESIS  shift, and go to state 54
    DOUBLE_COLON      shift, and go to state 19
    IDENT             shift, and go to state 20

    lvalue  go to state 57
    member  go to state 33
    call    go to state 56


State 15

   73 block: LEFT_CURLY_BRACKET . $@5 stmt_list RIGHT_CURLY_BRACKET
   74      | LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 58

    RIGHT_CURLY_BRACKET  [reduce using rule 72 ($@5)]
    $default             reduce using rule 72 ($@5)

    $@5  go to state 59


State 16

   65 objectdef: LEFT_SQUARE_BRACKET . elist RIGHT_SQUARE_BRACKET
   66          | LEFT_SQUARE_BRACKET . indexed RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 60
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr         go to state 61
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 62
    objectdef    go to state 35
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 38


State 17

   29 term: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS
   43 primary: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS
   55 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION             shift, and go to state 4
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 65
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 66
    const       go to state 38


State 18

   11 stmt: SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 19

   47 lvalue: DOUBLE_COLON . IDENT

    IDENT  shift, and go to state 67


State 20

   45 lvalue: IDENT .

    $default  reduce using rule 45 (lvalue)


State 21

   84 const: INTEGER .

    $default  reduce using rule 84 (const)


State 22

   85 const: REAL .

    $default  reduce using rule 85 (const)


State 23

   86 const: STRINGCONST .

    $default  reduce using rule 86 (const)


State 24

   30 term: UMINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 25

    0 $accept: program . $end

    $end  shift, and go to state 69


State 26

   12 stmt_list: stmt . stmt_list

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 13 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 70
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 27

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 28

    2 stmt: expr . SEMICOLON
   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    SEMICOLON       shift, and go to state 84


State 29

   28 expr: term .

    $default  reduce using rule 28 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   36 term: primary .

    $default  reduce using rule 36 (term)


State 32

   33 term: lvalue . INCREMENT
   35     | lvalue . DECREMENT
   39 assignexpr: lvalue . $@1 ASSIGN $@2 expr
   40 primary: lvalue .
   49 member: lvalue . DOT IDENT
   50       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   54 call: lvalue . callsuffix

    INCREMENT            shift, and go to state 85
    DECREMENT            shift, and go to state 86
    LEFT_SQUARE_BRACKET  shift, and go to state 87
    LEFT_PARENTHESIS     shift, and go to state 88
    DOT                  shift, and go to state 89
    DOUBLE_DOT           shift, and go to state 90

    ASSIGN    reduce using rule 37 ($@1)
    $default  reduce using rule 40 (primary)

    $@1         go to state 91
    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 33

   48 lvalue: member .

    $default  reduce using rule 48 (lvalue)


State 34

   41 primary: call .
   51 member: call . DOT IDENT
   52       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   53 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 95
    LEFT_PARENTHESIS     shift, and go to state 96
    DOT                  shift, and go to state 97

    $default  reduce using rule 41 (primary)


State 35

   42 primary: objectdef .

    $default  reduce using rule 42 (primary)


State 36

    9 stmt: block .

    $default  reduce using rule 9 (stmt)


State 37

   10 stmt: funcdef .

    $default  reduce using rule 10 (stmt)


State 38

   44 primary: const .

    $default  reduce using rule 44 (primary)


State 39

    3 stmt: ifstmt .

    $default  reduce using rule 3 (stmt)


State 40

    4 stmt: whilestmt .

    $default  reduce using rule 4 (stmt)


State 41

    5 stmt: forstmt .

    $default  reduce using rule 5 (stmt)


State 42

    6 stmt: returnstmt .

    $default  reduce using rule 6 (stmt)


State 43

   96 ifstmt: IF LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS stmt
   97       | IF LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS stmt ELSE stmt

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 98
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 44

   98 whilestmt: WHILE LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS stmt

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 99
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 45

  100 forstmt: FOR LEFT_PARENTHESIS . elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 100
    objectdef   go to state 35
    const       go to state 38


State 46

   79 funcdef: FUNCTION $@6 . IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block

    IDENT  shift, and go to state 101


State 47

   83 funcdef: FUNCTION $@10 . LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS $@12 block

    LEFT_PARENTHESIS  shift, and go to state 102


State 48

  103 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 103 (returnstmt)


State 49

  102 returnstmt: RETURN $@16 . expr SEMICOLON

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 103
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 50

    7 stmt: BREAK SEMICOLON .

    $default  reduce using rule 7 (stmt)


State 51

    8 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 52

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   31 term: NOT expr .

    $default  reduce using rule 31 (term)


State 53

   46 lvalue: LOCAL IDENT .

    $default  reduce using rule 46 (lvalue)


State 54

   55 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION  shift, and go to state 4

    funcdef  go to state 104


State 55

   32 term: INCREMENT lvalue .
   49 member: lvalue . DOT IDENT
   50       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   54 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 87
    LEFT_PARENTHESIS     shift, and go to state 88
    DOT                  shift, and go to state 89
    DOUBLE_DOT           shift, and go to state 90

    $default  reduce using rule 32 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 56

   51 member: call . DOT IDENT
   52       | call . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   53 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 95
    LEFT_PARENTHESIS     shift, and go to state 96
    DOT                  shift, and go to state 97


State 57

   34 term: DECREMENT lvalue .
   49 member: lvalue . DOT IDENT
   50       | lvalue . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   54 call: lvalue . callsuffix

    LEFT_SQUARE_BRACKET  shift, and go to state 87
    LEFT_PARENTHESIS     shift, and go to state 88
    DOT                  shift, and go to state 89
    DOUBLE_DOT           shift, and go to state 90

    $default  reduce using rule 34 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 58

   74 block: LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    $default  reduce using rule 74 (block)


State 59

   73 block: LEFT_CURLY_BRACKET $@5 . stmt_list RIGHT_CURLY_BRACKET

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 13 (stmt_list)

    stmt        go to state 26
    stmt_list   go to state 105
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 60

   71 indexedelem: LEFT_CURLY_BRACKET . expr COLON $@4 expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 106
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 61

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   61 elist: expr . elist_expressions

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    COMMA           shift, and go to state 107

    $default  reduce using rule 64 (elist_expressions)

    elist_expressions  go to state 108


State 62

   65 objectdef: LEFT_SQUARE_BRACKET elist . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 109


State 63

   66 objectdef: LEFT_SQUARE_BRACKET indexed . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 110


State 64

   67 indexed: indexedelem . indexedelem_list

    COMMA  shift, and go to state 111

    $default  reduce using rule 69 (indexedelem_list)

    indexedelem_list  go to state 112


State 65

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   29 term: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 71
    OR                 shift, and go to state 72
    ADD                shift, and go to state 73
    MINUS              shift, and go to state 74
    MULTIPLICATION     shift, and go to state 75
    DIVISION           shift, and go to state 76
    MODULO             shift, and go to state 77
    EQUAL              shift, and go to state 78
    INEQUAL            shift, and go to state 79
    GREATER            shift, and go to state 80
    GREATER_EQUAL      shift, and go to state 81
    LESS               shift, and go to state 82
    LESS_EQUAL         shift, and go to state 83
    RIGHT_PARENTHESIS  shift, and go to state 113


State 66

   43 primary: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS
   55 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 114


State 67

   47 lvalue: DOUBLE_COLON IDENT .

    $default  reduce using rule 47 (lvalue)


State 68

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   30 term: UMINUS expr .

    $default  reduce using rule 30 (term)


State 69

    0 $accept: program $end .

    $default  accept


State 70

   12 stmt_list: stmt stmt_list .

    $default  reduce using rule 12 (stmt_list)


State 71

   26 expr: expr AND . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 115
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 72

   27 expr: expr OR . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 116
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 73

   15 expr: expr ADD . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 117
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 74

   16 expr: expr MINUS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 118
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 75

   17 expr: expr MULTIPLICATION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 119
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   18 expr: expr DIVISION . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 120
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   19 expr: expr MODULO . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 121
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   24 expr: expr EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 122
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   25 expr: expr INEQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   20 expr: expr GREATER . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   21 expr: expr GREATER_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   22 expr: expr LESS . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

   23 expr: expr LESS_EQUAL . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 84

    2 stmt: expr SEMICOLON .

    $default  reduce using rule 2 (stmt)


State 85

   33 term: lvalue INCREMENT .

    $default  reduce using rule 33 (term)


State 86

   35 term: lvalue DECREMENT .

    $default  reduce using rule 35 (term)


State 87

   50 member: lvalue LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 88

   59 normcall: LEFT_PARENTHESIS . $@3 elist RIGHT_PARENTHESIS

    $default  reduce using rule 58 ($@3)

    $@3  go to state 129


State 89

   49 member: lvalue DOT . IDENT

    IDENT  shift, and go to state 130


State 90

   60 methodcall: DOUBLE_DOT . IDENT LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    IDENT  shift, and go to state 131


State 91

   39 assignexpr: lvalue $@1 . ASSIGN $@2 expr

    ASSIGN  shift, and go to state 132


State 92

   54 call: lvalue callsuffix .

    $default  reduce using rule 54 (call)


State 93

   56 callsuffix: normcall .

    $default  reduce using rule 56 (callsuffix)


State 94

   57 callsuffix: methodcall .

    $default  reduce using rule 57 (callsuffix)


State 95

   52 member: call LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 96

   53 call: call LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 134
    objectdef   go to state 35
    const       go to state 38


State 97

   51 member: call DOT . IDENT

    IDENT  shift, and go to state 135


State 98

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   96 ifstmt: IF LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS stmt
   97       | IF LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS stmt ELSE stmt

    AND                shift, and go to state 71
    OR                 shift, and go to state 72
    ADD                shift, and go to state 73
    MINUS              shift, and go to state 74
    MULTIPLICATION     shift, and go to state 75
    DIVISION           shift, and go to state 76
    MODULO             shift, and go to state 77
    EQUAL              shift, and go to state 78
    INEQUAL            shift, and go to state 79
    GREATER            shift, and go to state 80
    GREATER_EQUAL      shift, and go to state 81
    LESS               shift, and go to state 82
    LESS_EQUAL         shift, and go to state 83
    RIGHT_PARENTHESIS  shift, and go to state 136


State 99

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   98 whilestmt: WHILE LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS stmt

    AND                shift, and go to state 71
    OR                 shift, and go to state 72
    ADD                shift, and go to state 73
    MINUS              shift, and go to state 74
    MULTIPLICATION     shift, and go to state 75
    DIVISION           shift, and go to state 76
    MODULO             shift, and go to state 77
    EQUAL              shift, and go to state 78
    INEQUAL            shift, and go to state 79
    GREATER            shift, and go to state 80
    GREATER_EQUAL      shift, and go to state 81
    LESS               shift, and go to state 82
    LESS_EQUAL         shift, and go to state 83
    RIGHT_PARENTHESIS  shift, and go to state 137


State 100

  100 forstmt: FOR LEFT_PARENTHESIS elist . SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

    SEMICOLON  shift, and go to state 138


State 101

   79 funcdef: FUNCTION $@6 IDENT . $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block

    $default  reduce using rule 76 ($@7)

    $@7  go to state 139


State 102

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS . $@11 idlist RIGHT_PARENTHESIS $@12 block

    $default  reduce using rule 81 ($@11)

    $@11  go to state 140


State 103

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
  102 returnstmt: RETURN $@16 expr . SEMICOLON

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    SEMICOLON       shift, and go to state 141


State 104

   55 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 142


State 105

   73 block: LEFT_CURLY_BRACKET $@5 stmt_list . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 143


State 106

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   71 indexedelem: LEFT_CURLY_BRACKET expr . COLON $@4 expr RIGHT_CURLY_BRACKET

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    COLON           shift, and go to state 144


State 107

   63 elist_expressions: COMMA . expr elist_expressions

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 145
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 108

   61 elist: expr elist_expressions .

    $default  reduce using rule 61 (elist)


State 109

   65 objectdef: LEFT_SQUARE_BRACKET elist RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 65 (objectdef)


State 110

   66 objectdef: LEFT_SQUARE_BRACKET indexed RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 66 (objectdef)


State 111

   68 indexedelem_list: COMMA . indexedelem indexedelem_list

    LEFT_CURLY_BRACKET  shift, and go to state 60

    indexedelem  go to state 146


State 112

   67 indexed: indexedelem indexedelem_list .

    $default  reduce using rule 67 (indexed)


State 113

   29 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 29 (term)


State 114

   43 primary: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS .
   55 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 147

    $default  reduce using rule 43 (primary)


State 115

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   26     | expr AND expr .
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83

    $default  reduce using rule 26 (expr)


State 116

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   27     | expr OR expr .

    AND             shift, and go to state 71
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83

    $default  reduce using rule 27 (expr)


State 117

   15 expr: expr . ADD expr
   15     | expr ADD expr .
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    $default  reduce using rule 15 (expr)


State 118

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   16     | expr MINUS expr .
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    $default  reduce using rule 16 (expr)


State 119

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   17     | expr MULTIPLICATION expr .
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 120

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   18     | expr DIVISION expr .
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 121

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   19     | expr MODULO expr .
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 19 (expr)


State 122

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   24     | expr EQUAL expr .
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83

    EQUAL    error (nonassociative)
    INEQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 123

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   25     | expr INEQUAL expr .
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83

    EQUAL    error (nonassociative)
    INEQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 124

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   20     | expr GREATER expr .
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 125

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   21     | expr GREATER_EQUAL expr .
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 126

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   22     | expr LESS expr .
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 127

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   23     | expr LESS_EQUAL expr .
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77

    GREATER        error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS           error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 23 (expr)


State 128

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   50 member: lvalue LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 71
    OR                    shift, and go to state 72
    ADD                   shift, and go to state 73
    MINUS                 shift, and go to state 74
    MULTIPLICATION        shift, and go to state 75
    DIVISION              shift, and go to state 76
    MODULO                shift, and go to state 77
    EQUAL                 shift, and go to state 78
    INEQUAL               shift, and go to state 79
    GREATER               shift, and go to state 80
    GREATER_EQUAL         shift, and go to state 81
    LESS                  shift, and go to state 82
    LESS_EQUAL            shift, and go to state 83
    RIGHT_SQUARE_BRACKET  shift, and go to state 148


State 129

   59 normcall: LEFT_PARENTHESIS $@3 . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 149
    objectdef   go to state 35
    const       go to state 38


State 130

   49 member: lvalue DOT IDENT .

    $default  reduce using rule 49 (member)


State 131

   60 methodcall: DOUBLE_DOT IDENT . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 150


State 132

   39 assignexpr: lvalue $@1 ASSIGN . $@2 expr

    $default  reduce using rule 38 ($@2)

    $@2  go to state 151


State 133

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   52 member: call LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET

    AND                   shift, and go to state 71
    OR                    shift, and go to state 72
    ADD                   shift, and go to state 73
    MINUS                 shift, and go to state 74
    MULTIPLICATION        shift, and go to state 75
    DIVISION              shift, and go to state 76
    MODULO                shift, and go to state 77
    EQUAL                 shift, and go to state 78
    INEQUAL               shift, and go to state 79
    GREATER               shift, and go to state 80
    GREATER_EQUAL         shift, and go to state 81
    LESS                  shift, and go to state 82
    LESS_EQUAL            shift, and go to state 83
    RIGHT_SQUARE_BRACKET  shift, and go to state 152


State 134

   53 call: call LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 153


State 135

   51 member: call DOT IDENT .

    $default  reduce using rule 51 (member)


State 136

   96 ifstmt: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS . stmt
   97       | IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS . stmt ELSE stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    stmt        go to state 154
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 137

   98 whilestmt: WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    stmt        go to state 155
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 138

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON . expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 156
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 139

   79 funcdef: FUNCTION $@6 IDENT $@7 . LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block

    LEFT_PARENTHESIS  shift, and go to state 157


State 140

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 . idlist RIGHT_PARENTHESIS $@12 block

    IDENT  shift, and go to state 158

    $default  reduce using rule 92 (idlist)

    idlist  go to state 159


State 141

  102 returnstmt: RETURN $@16 expr SEMICOLON .

    $default  reduce using rule 102 (returnstmt)


State 142

   55 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 147


State 143

   73 block: LEFT_CURLY_BRACKET $@5 stmt_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 73 (block)


State 144

   71 indexedelem: LEFT_CURLY_BRACKET expr COLON . $@4 expr RIGHT_CURLY_BRACKET

    $default  reduce using rule 70 ($@4)

    $@4  go to state 160


State 145

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   63 elist_expressions: COMMA expr . elist_expressions

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    COMMA           shift, and go to state 107

    $default  reduce using rule 64 (elist_expressions)

    elist_expressions  go to state 161


State 146

   68 indexedelem_list: COMMA indexedelem . indexedelem_list

    COMMA  shift, and go to state 111

    $default  reduce using rule 69 (indexedelem_list)

    indexedelem_list  go to state 162


State 147

   55 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 163
    objectdef   go to state 35
    const       go to state 38


State 148

   50 member: lvalue LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 50 (member)


State 149

   59 normcall: LEFT_PARENTHESIS $@3 elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 164


State 150

   60 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 165
    objectdef   go to state 35
    const       go to state 38


State 151

   39 assignexpr: lvalue $@1 ASSIGN $@2 . expr

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 166
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 152

   52 member: call LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 52 (member)


State 153

   53 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 53 (call)


State 154

   96 ifstmt: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt .
   97       | IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt . ELSE stmt

    ELSE  shift, and go to state 167

    ELSE      [reduce using rule 96 (ifstmt)]
    $default  reduce using rule 96 (ifstmt)


State 155

   98 whilestmt: WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt .

    $default  reduce using rule 98 (whilestmt)


State 156

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr . SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83
    SEMICOLON       shift, and go to state 168


State 157

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS . $@8 idlist RIGHT_PARENTHESIS $@9 block

    $default  reduce using rule 77 ($@8)

    $@8  go to state 169


State 158

   91 idlist: IDENT . $@13 idlist_list

    $default  reduce using rule 90 ($@13)

    $@13  go to state 170


State 159

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 idlist . RIGHT_PARENTHESIS $@12 block

    RIGHT_PARENTHESIS  shift, and go to state 171


State 160

   71 indexedelem: LEFT_CURLY_BRACKET expr COLON $@4 . expr RIGHT_CURLY_BRACKET

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    expr        go to state 172
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 161

   63 elist_expressions: COMMA expr elist_expressions .

    $default  reduce using rule 63 (elist_expressions)


State 162

   68 indexedelem_list: COMMA indexedelem indexedelem_list .

    $default  reduce using rule 68 (indexedelem_list)


State 163

   55 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 173


State 164

   59 normcall: LEFT_PARENTHESIS $@3 elist RIGHT_PARENTHESIS .

    $default  reduce using rule 59 (normcall)


State 165

   60 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 174


State 166

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   39 assignexpr: lvalue $@1 ASSIGN $@2 expr .

    AND             shift, and go to state 71
    OR              shift, and go to state 72
    ADD             shift, and go to state 73
    MINUS           shift, and go to state 74
    MULTIPLICATION  shift, and go to state 75
    DIVISION        shift, and go to state 76
    MODULO          shift, and go to state 77
    EQUAL           shift, and go to state 78
    INEQUAL         shift, and go to state 79
    GREATER         shift, and go to state 80
    GREATER_EQUAL   shift, and go to state 81
    LESS            shift, and go to state 82
    LESS_EQUAL      shift, and go to state 83

    $default  reduce using rule 39 (assignexpr)


State 167

   97 ifstmt: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt ELSE . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    stmt        go to state 175
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 168

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON . elist RIGHT_PARENTHESIS $@15 stmt

    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    $default  reduce using rule 62 (elist)

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 176
    objectdef   go to state 35
    const       go to state 38


State 169

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 . idlist RIGHT_PARENTHESIS $@9 block

    IDENT  shift, and go to state 158

    $default  reduce using rule 92 (idlist)

    idlist  go to state 177


State 170

   91 idlist: IDENT $@13 . idlist_list

    COMMA  shift, and go to state 178

    $default  reduce using rule 95 (idlist_list)

    idlist_list  go to state 179


State 171

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS . $@12 block

    $default  reduce using rule 82 ($@12)

    $@12  go to state 180


State 172

   15 expr: expr . ADD expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLICATION expr
   18     | expr . DIVISION expr
   19     | expr . MODULO expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQUAL expr
   22     | expr . LESS expr
   23     | expr . LESS_EQUAL expr
   24     | expr . EQUAL expr
   25     | expr . INEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   71 indexedelem: LEFT_CURLY_BRACKET expr COLON $@4 expr . RIGHT_CURLY_BRACKET

    AND                  shift, and go to state 71
    OR                   shift, and go to state 72
    ADD                  shift, and go to state 73
    MINUS                shift, and go to state 74
    MULTIPLICATION       shift, and go to state 75
    DIVISION             shift, and go to state 76
    MODULO               shift, and go to state 77
    EQUAL                shift, and go to state 78
    INEQUAL              shift, and go to state 79
    GREATER              shift, and go to state 80
    GREATER_EQUAL        shift, and go to state 81
    LESS                 shift, and go to state 82
    LESS_EQUAL           shift, and go to state 83
    RIGHT_CURLY_BRACKET  shift, and go to state 181


State 173

   55 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 55 (call)


State 174

   60 methodcall: DOUBLE_DOT IDENT LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 60 (methodcall)


State 175

   97 ifstmt: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS stmt ELSE stmt .

    $default  reduce using rule 97 (ifstmt)


State 176

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist . RIGHT_PARENTHESIS $@15 stmt

    RIGHT_PARENTHESIS  shift, and go to state 182


State 177

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist . RIGHT_PARENTHESIS $@9 block

    RIGHT_PARENTHESIS  shift, and go to state 183


State 178

   94 idlist_list: COMMA . IDENT $@14 idlist_list

    IDENT  shift, and go to state 184


State 179

   91 idlist: IDENT $@13 idlist_list .

    $default  reduce using rule 91 (idlist)


State 180

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS $@12 . block

    LEFT_CURLY_BRACKET  shift, and go to state 15

    block  go to state 185


State 181

   71 indexedelem: LEFT_CURLY_BRACKET expr COLON $@4 expr RIGHT_CURLY_BRACKET .

    $default  reduce using rule 71 (indexedelem)


State 182

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS . $@15 stmt

    $default  reduce using rule 99 ($@15)

    $@15  go to state 186


State 183

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS . $@9 block

    $default  reduce using rule 78 ($@9)

    $@9  go to state 187


State 184

   94 idlist_list: COMMA IDENT . $@14 idlist_list

    $default  reduce using rule 93 ($@14)

    $@14  go to state 188


State 185

   83 funcdef: FUNCTION $@10 LEFT_PARENTHESIS $@11 idlist RIGHT_PARENTHESIS $@12 block .

    $default  reduce using rule 83 (funcdef)


State 186

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 . stmt

    IF                   shift, and go to state 1
    WHILE                shift, and go to state 2
    FOR                  shift, and go to state 3
    FUNCTION             shift, and go to state 4
    RETURN               shift, and go to state 5
    BREAK                shift, and go to state 6
    CONTINUE             shift, and go to state 7
    NOT                  shift, and go to state 8
    LOCAL                shift, and go to state 9
    TRUE                 shift, and go to state 10
    FALSE                shift, and go to state 11
    NIL                  shift, and go to state 12
    INCREMENT            shift, and go to state 13
    DECREMENT            shift, and go to state 14
    LEFT_CURLY_BRACKET   shift, and go to state 15
    LEFT_SQUARE_BRACKET  shift, and go to state 16
    LEFT_PARENTHESIS     shift, and go to state 17
    SEMICOLON            shift, and go to state 18
    DOUBLE_COLON         shift, and go to state 19
    IDENT                shift, and go to state 20
    INTEGER              shift, and go to state 21
    REAL                 shift, and go to state 22
    STRINGCONST          shift, and go to state 23
    UMINUS               shift, and go to state 24

    stmt        go to state 189
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 187

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 . block

    LEFT_CURLY_BRACKET  shift, and go to state 15

    block  go to state 190


State 188

   94 idlist_list: COMMA IDENT $@14 . idlist_list

    COMMA  shift, and go to state 178

    $default  reduce using rule 95 (idlist_list)

    idlist_list  go to state 191


State 189

  100 forstmt: FOR LEFT_PARENTHESIS elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTHESIS $@15 stmt .

    $default  reduce using rule 100 (forstmt)


State 190

   79 funcdef: FUNCTION $@6 IDENT $@7 LEFT_PARENTHESIS $@8 idlist RIGHT_PARENTHESIS $@9 block .

    $default  reduce using rule 79 (funcdef)


State 191

   94 idlist_list: COMMA IDENT $@14 idlist_list .

    $default  reduce using rule 94 (idlist_list)
